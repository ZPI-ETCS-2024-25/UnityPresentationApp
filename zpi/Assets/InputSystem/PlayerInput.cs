//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b1264814-e270-48f1-99c7-d59ba7d90b30"",
            ""actions"": [
                {
                    ""name"": ""Change track left"",
                    ""type"": ""Button"",
                    ""id"": ""08c627a1-9296-4db2-81a7-712ad0257f07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change track right"",
                    ""type"": ""Button"",
                    ""id"": ""673b20f6-105c-48fe-87cc-6ca234cfe77b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change acceleration"",
                    ""type"": ""Value"",
                    ""id"": ""dad678cd-1fb4-4112-9635-fb8f3b77d1a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4661b436-0017-4643-8d1d-3d8625e64218"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change track left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8fa47e5-bb2e-48ad-87fd-634bee8cc5c8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change track right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6beb46c1-5eb2-4a5c-96dc-8a3a127f7fea"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""5c1f9039-3de0-4ac2-b88e-47bde072f6de"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""0f66a5dc-0277-495d-b930-5624af244734"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""460c18d0-d43e-47b0-abf3-5a9c3817aa1f"",
            ""actions"": [
                {
                    ""name"": ""Change camera"",
                    ""type"": ""Button"",
                    ""id"": ""84ca65d5-14df-4603-b482-e32027fde9d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""5854ca7d-e826-4154-97a1-f4a0bb44f879"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lock Camera"",
                    ""type"": ""Button"",
                    ""id"": ""34f6037f-00ff-4b85-aa9c-f65b776aa7a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2dd3ff4a-b0d2-4476-9a3c-5a630df2e6e0"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d9cba98a-ba9c-4d13-8ef6-b046dc0e2431"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e35087b7-adc2-47a6-ae25-ccee71255819"",
                    ""path"": ""<Pointer>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f30728b0-e3b0-47bb-9b53-4f439d1688ad"",
                    ""path"": ""<Pointer>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3518eaf2-1b64-4b5c-8dd8-ce19befae0af"",
                    ""path"": ""<Pointer>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""10a280dd-5427-4aa5-bd52-6661b0033e7b"",
                    ""path"": ""<Pointer>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""60ed43fa-d3b8-42df-b794-690eacb12bdb"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Changetrackleft = m_Player.FindAction("Change track left", throwIfNotFound: true);
        m_Player_Changetrackright = m_Player.FindAction("Change track right", throwIfNotFound: true);
        m_Player_Changeacceleration = m_Player.FindAction("Change acceleration", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Changecamera = m_Camera.FindAction("Change camera", throwIfNotFound: true);
        m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
        m_Camera_LockCamera = m_Camera.FindAction("Lock Camera", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInput.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, PlayerInput.Camera.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Changetrackleft;
    private readonly InputAction m_Player_Changetrackright;
    private readonly InputAction m_Player_Changeacceleration;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Changetrackleft => m_Wrapper.m_Player_Changetrackleft;
        public InputAction @Changetrackright => m_Wrapper.m_Player_Changetrackright;
        public InputAction @Changeacceleration => m_Wrapper.m_Player_Changeacceleration;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Changetrackleft.started += instance.OnChangetrackleft;
            @Changetrackleft.performed += instance.OnChangetrackleft;
            @Changetrackleft.canceled += instance.OnChangetrackleft;
            @Changetrackright.started += instance.OnChangetrackright;
            @Changetrackright.performed += instance.OnChangetrackright;
            @Changetrackright.canceled += instance.OnChangetrackright;
            @Changeacceleration.started += instance.OnChangeacceleration;
            @Changeacceleration.performed += instance.OnChangeacceleration;
            @Changeacceleration.canceled += instance.OnChangeacceleration;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Changetrackleft.started -= instance.OnChangetrackleft;
            @Changetrackleft.performed -= instance.OnChangetrackleft;
            @Changetrackleft.canceled -= instance.OnChangetrackleft;
            @Changetrackright.started -= instance.OnChangetrackright;
            @Changetrackright.performed -= instance.OnChangetrackright;
            @Changetrackright.canceled -= instance.OnChangetrackright;
            @Changeacceleration.started -= instance.OnChangeacceleration;
            @Changeacceleration.performed -= instance.OnChangeacceleration;
            @Changeacceleration.canceled -= instance.OnChangeacceleration;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Changecamera;
    private readonly InputAction m_Camera_Look;
    private readonly InputAction m_Camera_LockCamera;
    public struct CameraActions
    {
        private @PlayerInput m_Wrapper;
        public CameraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Changecamera => m_Wrapper.m_Camera_Changecamera;
        public InputAction @Look => m_Wrapper.m_Camera_Look;
        public InputAction @LockCamera => m_Wrapper.m_Camera_LockCamera;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Changecamera.started += instance.OnChangecamera;
            @Changecamera.performed += instance.OnChangecamera;
            @Changecamera.canceled += instance.OnChangecamera;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @LockCamera.started += instance.OnLockCamera;
            @LockCamera.performed += instance.OnLockCamera;
            @LockCamera.canceled += instance.OnLockCamera;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Changecamera.started -= instance.OnChangecamera;
            @Changecamera.performed -= instance.OnChangecamera;
            @Changecamera.canceled -= instance.OnChangecamera;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @LockCamera.started -= instance.OnLockCamera;
            @LockCamera.performed -= instance.OnLockCamera;
            @LockCamera.canceled -= instance.OnLockCamera;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface IPlayerActions
    {
        void OnChangetrackleft(InputAction.CallbackContext context);
        void OnChangetrackright(InputAction.CallbackContext context);
        void OnChangeacceleration(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnChangecamera(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnLockCamera(InputAction.CallbackContext context);
    }
}
